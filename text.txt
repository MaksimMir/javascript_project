1. Замыкание - это функция и кё лексическое окружение. То есть замыкание, ещё и запоминание функцией внешних переменных.
    Грубо говоря все функции являются замыканиями. 
    В задаче со змейкой все функции используют глобальные переменные и другие йункции, что и является замыканием.

2. 
    if (!("a" in window)) {
        var a = 1;
    }
    alert(a); В этом примере переменная а определяется только в блоке if, и за его пределами не видна.
              Причём при использование ключевого слова let выпадает ошибка. Что будет более приемлемо в данной ситуации. 
    
    var b = function a(x) {
        x && a(--x);
    };
    alert(a); В данной ситуации  мы имеем дело с именованным йункциональным выражением. 
              Имя а будет видно только внутри функции. Это ограничение входит в стандарт JS.

    function a(x) {
        return x * 2;
    }
    var a;
    alert(a); JS в первую очередь инициализирует функции.

    function b(x, y, a) {
        arguments[2] = 10;
        alert(a);
    }
    b(1, 2, 3); Аргументы функции записываются в псевдо-массив arguments, доступ к элементам
                возможен так же как и к элементам массива. В современном языке заменён на 
                спрэд оператор ... (...arg)

    function a() {
        alert(this);
    }
    a.call(null); Метод call первым аргументом передает контекст вызова функции.
                  В старом стандарте при передаче null, в качестве контекста передавался объект window.
                  С использованием "use strict" контекст будет как есть, то есть null. 